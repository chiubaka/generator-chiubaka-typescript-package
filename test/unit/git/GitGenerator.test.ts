import path from "node:path";
import YeomanTest, { RunResult } from "yeoman-test";

import PackageJson from "../../../package.json";

describe("GitGenerator", () => {
  let result: RunResult;

  beforeAll(async () => {
    result = await YeomanTest.create(path.join(__dirname, "../../../src/git"))
      .withOptions({ yarnInstall: true, configGitUser: true })
      .run();
  });

  it("initializes a git repo", () => {
    expect(() => {
      result.env.spawnCommandSync("git", ["status"], {});
    }).not.toThrow();
  });

  it("creates a commit for the generated files", () => {
    const commandResult = result.env.spawnCommandSync(
      "git",
      ["log", "--oneline", "-n", "1"],
      { stdio: ["ignore", "pipe", "pipe"] }
    );

    const latestCommitMessage = commandResult.stdout;

    expect(latestCommitMessage).toContain(
      `Add/update files generated by ${PackageJson.name} v${PackageJson.version}`
    );
  });

  it("leaves the working directory clean", () => {
    const commandResult = result.env.spawnCommandSync(
      "git",
      ["status", "--porcelain"],
      { stdio: ["ignore", "pipe", "pipe"] }
    );

    const gitStatus = commandResult.stdout;

    expect(gitStatus).toBe("");
  });
});
