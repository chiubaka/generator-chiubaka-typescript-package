import path from "node:path";
import YeomanHelpers, { RunResult } from "yeoman-test";

import { NodeModuleGenerator } from "./NodeModuleGenerator";

describe("NodeModuleGenerator", () => {
  const answers = {
    name: "test-package",
    description: "This is a test package generated by Yeoman.",
    authorName: "Jon Smith",
    authorEmail: "jon@example.com",
    githubUrl: "https://github.com/chiubaka/test-package",
    keywords: "test chiubaka-technologies",
  };

  let result: RunResult;

  beforeAll(async () => {
    result = await runWithAnswers(answers);
  });

  describe("package.json", () => {
    it("creates a package.json file", () => {
      result.assertFile("package.json");
    });

    it("fills in the name of the package", () => {
      result.assertJsonFileContent("package.json", { name: "test-package" });
    });

    it("fills in the version of the package", () => {
      result.assertJsonFileContent("package.json", { version: "0.0.1" });
    });

    it("fills in the description of the package", () => {
      result.assertJsonFileContent("package.json", {
        description: "This is a test package generated by Yeoman.",
      });
    });

    it("fills in an empty scripts section for the package", () => {
      result.assertJsonFileContent("package.json", {
        scripts: {},
      });
    });

    it("fills in the repository section of the package", () => {
      result.assertJsonFileContent("package.json", {
        repository: {
          type: "git",
          url: "git+https://github.com/chiubaka/test-package.git",
        },
      });
    });

    describe("keywords", () => {
      describe("when no keywords are provided", () => {
        let noKeywordsResult: RunResult;

        beforeAll(async () => {
          noKeywordsResult = await runWithAnswers({
            ...answers,
            keywords: "",
          });
        });

        it("does not include the keywords section", () => {
          noKeywordsResult.assertNoJsonFileContent("package.json", {
            keywords: [],
          });
        });
      });

      describe("when keywords are provided", () => {
        it("fills in the keywords section of the package", () => {
          result.assertJsonFileContent("package.json", {
            keywords: ["test", "chiubaka-technologies"],
          });
        });

        it("formats the keywords section properly", () => {
          result.assertFileContent(
            "package.json",
            '"keywords": ["test", "chiubaka-technologies"],'
          );
        });
      });
    });

    it("fills in the author of the package", () => {
      result.assertJsonFileContent("package.json", {
        author: `Jon Smith <jon@example.com>`,
      });
    });

    it("fills in the license of the package", () => {
      result.assertJsonFileContent("package.json", {
        license: "UNLICENSED",
      });
    });

    it("fills in the bugs section of the package", () => {
      result.assertJsonFileContent("package.json", {
        bugs: {
          url: "https://github.com/chiubaka/test-package/issues",
        },
      });
    });

    it("fills in the homepage of the package", () => {
      result.assertJsonFileContent("package.json", {
        homepage: "https://github.com/chiubaka/test-package#readme",
      });
    });
  });
});

const runWithAnswers = (answers: Record<string, any>): Promise<RunResult> => {
  return YeomanHelpers.create(NodeModuleGenerator, {
    resolved: path.join(__dirname, "./NodeModuleGenerator.ts"),
    namespace: "typescript-package:node-module",
  })
    .withPrompts(answers)
    .run();
};
